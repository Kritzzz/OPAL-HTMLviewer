IMPLEMENTATION Viewer

DATA 	gui == 	gui(edit : canvasEditor,
					emit : emitter[action],
					title: denotation,
					metr : metrics)

DATA 	action == exit

FUN viewer : com[void]
FUN setupGui : com[gui]
FUN setupWindow : gui -> com[window]
FUN waitForTermination : gui ** window -> com[void]
FUN frame : gui -> view
FUN pad : canvasEditor -> view
FUN exitButton : emitter[action] -> view

DEF viewer == 	setupGui & (\\G.
			  	setupWindow(G) & (\\win. 

			  	-- drawText(G) &
				waitForTermination(G, win)))

-- 
-- Build WINDOW
--


DEF setupGui == canvasEditor & (\\edit.
				emitter & (\\emit.
				fontMetrics(stdFont) & (\\metr.
				succeed(gui(edit, emit, "Viewer", metr)))))


DEF setupWindow(G) == window(frame(G)) & (\\win.
						set(win, titleName(title(G))) & 
						(\\ _ . grab(win) & 
						(\\ _ . succeed(win))))


DEF waitForTermination(G, win) ==
			await(emit(G)) & (\\act.
			IF act exit? THEN release(win) & delete(win) & exit(0) FI)


FUN drawText : gui -> com[void]
DEF drawText(G) == display(edit(G), picture(metr(G)))


DEF frame(G) == pad(edit(G))
				^^
				exitButton(emit(G))


DEF pad(editor) == 	canvas with (size(canvasSize)
					++ edit(editor)
					++ background(canvasBackground))


DEF exitButton(emit) == button with (bind(emit, exit)
						++ text("Beenden"))
